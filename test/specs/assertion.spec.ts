import * as assert from 'src/lib/assertion';

class ExtendArr extends Array {}
class Obj {}

const num = 1;
const str = '1';
const bool = true;
const sym = Symbol('key');
const nul = null;
const undef = undefined;
const func = () => void 0;
const reg = /123/;
const strictObj = {};
const customClass = new Obj();
const arr = [1, 2];
const arrEx = new ExtendArr();
const span = document.createElement('span');
const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');

describe('assertion.ts: assert the type of data', () => {
    test('number', () => {
        expect(assert.isNumber(num)).toEqual(true);
        expect(assert.isNumber(str)).toEqual(false);
        expect(assert.isNumber(bool)).toEqual(false);
        expect(assert.isNumber(sym)).toEqual(false);
        expect(assert.isNumber(nul)).toEqual(false);
        expect(assert.isNumber(undef)).toEqual(false);
        expect(assert.isNumber(func)).toEqual(false);
        expect(assert.isNumber(reg)).toEqual(false);
        expect(assert.isNumber(strictObj)).toEqual(false);
        expect(assert.isNumber(customClass)).toEqual(false);
        expect(assert.isNumber(arr)).toEqual(false);
        expect(assert.isNumber(arrEx)).toEqual(false);
        expect(assert.isNumber(span)).toEqual(false);
    });
    test('string', () => {
        expect(assert.isString(num)).toEqual(false);
        expect(assert.isString(str)).toEqual(true);
        expect(assert.isString(bool)).toEqual(false);
        expect(assert.isString(sym)).toEqual(false);
        expect(assert.isString(nul)).toEqual(false);
        expect(assert.isString(undef)).toEqual(false);
        expect(assert.isString(func)).toEqual(false);
        expect(assert.isString(reg)).toEqual(false);
        expect(assert.isString(strictObj)).toEqual(false);
        expect(assert.isString(customClass)).toEqual(false);
        expect(assert.isString(arr)).toEqual(false);
        expect(assert.isString(arrEx)).toEqual(false);
        expect(assert.isString(span)).toEqual(false);
    });
    test('boolean', () => {
        expect(assert.isBoolean(num)).toEqual(false);
        expect(assert.isBoolean(str)).toEqual(false);
        expect(assert.isBoolean(bool)).toEqual(true);
        expect(assert.isBoolean(sym)).toEqual(false);
        expect(assert.isBoolean(nul)).toEqual(false);
        expect(assert.isBoolean(undef)).toEqual(false);
        expect(assert.isBoolean(func)).toEqual(false);
        expect(assert.isBoolean(reg)).toEqual(false);
        expect(assert.isBoolean(strictObj)).toEqual(false);
        expect(assert.isBoolean(customClass)).toEqual(false);
        expect(assert.isBoolean(arr)).toEqual(false);
        expect(assert.isBoolean(arrEx)).toEqual(false);
        expect(assert.isBoolean(span)).toEqual(false);
    });
    test('symbol', () => {
        expect(assert.isSymbol(num)).toEqual(false);
        expect(assert.isSymbol(str)).toEqual(false);
        expect(assert.isSymbol(bool)).toEqual(false);
        expect(assert.isSymbol(sym)).toEqual(true);
        expect(assert.isSymbol(nul)).toEqual(false);
        expect(assert.isSymbol(undef)).toEqual(false);
        expect(assert.isSymbol(func)).toEqual(false);
        expect(assert.isSymbol(reg)).toEqual(false);
        expect(assert.isSymbol(strictObj)).toEqual(false);
        expect(assert.isSymbol(customClass)).toEqual(false);
        expect(assert.isSymbol(arr)).toEqual(false);
        expect(assert.isSymbol(arrEx)).toEqual(false);
        expect(assert.isSymbol(span)).toEqual(false);
    });
    test('null', () => {
        expect(assert.isNull(num)).toEqual(false);
        expect(assert.isNull(str)).toEqual(false);
        expect(assert.isNull(bool)).toEqual(false);
        expect(assert.isNull(sym)).toEqual(false);
        expect(assert.isNull(nul)).toEqual(true);
        expect(assert.isNull(undef)).toEqual(true);
        expect(assert.isNull(func)).toEqual(false);
        expect(assert.isNull(reg)).toEqual(false);
        expect(assert.isNull(strictObj)).toEqual(false);
        expect(assert.isNull(customClass)).toEqual(false);
        expect(assert.isNull(arr)).toEqual(false);
        expect(assert.isNull(arrEx)).toEqual(false);
        expect(assert.isNull(span)).toEqual(false);
    });
    test('function', () => {
        expect(assert.isFunction(num)).toEqual(false);
        expect(assert.isFunction(str)).toEqual(false);
        expect(assert.isFunction(bool)).toEqual(false);
        expect(assert.isFunction(sym)).toEqual(false);
        expect(assert.isFunction(nul)).toEqual(false);
        expect(assert.isFunction(undef)).toEqual(false);
        expect(assert.isFunction(func)).toEqual(true);
        expect(assert.isFunction(reg)).toEqual(false);
        expect(assert.isFunction(strictObj)).toEqual(false);
        expect(assert.isFunction(customClass)).toEqual(false);
        expect(assert.isFunction(arr)).toEqual(false);
        expect(assert.isFunction(arrEx)).toEqual(false);
        expect(assert.isFunction(span)).toEqual(false);
    });
    test('strict object', () => {
        expect(assert.isStrictObject(num)).toEqual(false);
        expect(assert.isStrictObject(str)).toEqual(false);
        expect(assert.isStrictObject(bool)).toEqual(false);
        expect(assert.isStrictObject(sym)).toEqual(false);
        expect(assert.isStrictObject(nul)).toEqual(false);
        expect(assert.isStrictObject(undef)).toEqual(false);
        expect(assert.isStrictObject(func)).toEqual(false);
        expect(assert.isStrictObject(reg)).toEqual(false);
        expect(assert.isStrictObject(strictObj)).toEqual(true);
        expect(assert.isStrictObject(customClass)).toEqual(true);
        expect(assert.isStrictObject(arr)).toEqual(false);
        expect(assert.isStrictObject(arrEx)).toEqual(false);
        expect(assert.isStrictObject(span)).toEqual(false);
    });
    test('object', () => {
        expect(assert.isObject(num)).toEqual(false);
        expect(assert.isObject(str)).toEqual(false);
        expect(assert.isObject(bool)).toEqual(false);
        expect(assert.isObject(sym)).toEqual(false);
        expect(assert.isObject(nul)).toEqual(false);
        expect(assert.isObject(undef)).toEqual(false);
        expect(assert.isObject(func)).toEqual(true);
        expect(assert.isObject(reg)).toEqual(true);
        expect(assert.isObject(strictObj)).toEqual(true);
        expect(assert.isObject(customClass)).toEqual(true);
        expect(assert.isObject(arr)).toEqual(true);
        expect(assert.isObject(arrEx)).toEqual(true);
        expect(assert.isObject(span)).toEqual(true);
    });
    test('array', () => {
        expect(assert.isArray(num)).toEqual(false);
        expect(assert.isArray(str)).toEqual(false);
        expect(assert.isArray(bool)).toEqual(false);
        expect(assert.isArray(sym)).toEqual(false);
        expect(assert.isArray(nul)).toEqual(false);
        expect(assert.isArray(undef)).toEqual(false);
        expect(assert.isArray(func)).toEqual(false);
        expect(assert.isArray(reg)).toEqual(false);
        expect(assert.isArray(strictObj)).toEqual(false);
        expect(assert.isArray(customClass)).toEqual(false);
        expect(assert.isArray(arr)).toEqual(true);
        expect(assert.isArray(arrEx)).toEqual(true);
        expect(assert.isArray(span)).toEqual(false);
    });
    test('regExp', () => {
        expect(assert.isRegExp(num)).toEqual(false);
        expect(assert.isRegExp(str)).toEqual(false);
        expect(assert.isRegExp(bool)).toEqual(false);
        expect(assert.isRegExp(sym)).toEqual(false);
        expect(assert.isRegExp(nul)).toEqual(false);
        expect(assert.isRegExp(undef)).toEqual(false);
        expect(assert.isRegExp(func)).toEqual(false);
        expect(assert.isRegExp(reg)).toEqual(true);
        expect(assert.isRegExp(strictObj)).toEqual(false);
        expect(assert.isRegExp(customClass)).toEqual(false);
        expect(assert.isRegExp(arr)).toEqual(false);
        expect(assert.isRegExp(arrEx)).toEqual(false);
        expect(assert.isRegExp(span)).toEqual(false);
    });
    test('element', () => {
        expect(assert.isElement(num)).toEqual(false);
        expect(assert.isElement(str)).toEqual(false);
        expect(assert.isElement(bool)).toEqual(false);
        expect(assert.isElement(sym)).toEqual(false);
        expect(assert.isElement(nul)).toEqual(false);
        expect(assert.isElement(undef)).toEqual(false);
        expect(assert.isElement(func)).toEqual(false);
        expect(assert.isElement(reg)).toEqual(false);
        expect(assert.isElement(strictObj)).toEqual(false);
        expect(assert.isElement(customClass)).toEqual(false);
        expect(assert.isElement(arr)).toEqual(false);
        expect(assert.isElement(arrEx)).toEqual(false);
        expect(assert.isElement(span)).toEqual(true);
        expect(assert.isElement(circle)).toEqual(true);
    });
    test('base type', () => {
        expect(assert.isBaseType(num)).toEqual(true);
        expect(assert.isBaseType(str)).toEqual(true);
        expect(assert.isBaseType(bool)).toEqual(true);
        expect(assert.isBaseType(sym)).toEqual(true);
        expect(assert.isBaseType(nul)).toEqual(true);
        expect(assert.isBaseType(undef)).toEqual(true);
        expect(assert.isBaseType(func)).toEqual(false);
        expect(assert.isBaseType(reg)).toEqual(false);
        expect(assert.isBaseType(strictObj)).toEqual(false);
        expect(assert.isBaseType(customClass)).toEqual(false);
        expect(assert.isBaseType(arr)).toEqual(false);
        expect(assert.isBaseType(arrEx)).toEqual(false);
        expect(assert.isBaseType(span)).toEqual(false);
    });
    test('base type exclude null', () => {
        expect(assert.isBaseTypeExNull(num)).toEqual(true);
        expect(assert.isBaseTypeExNull(str)).toEqual(true);
        expect(assert.isBaseTypeExNull(bool)).toEqual(true);
        expect(assert.isBaseTypeExNull(sym)).toEqual(true);
        expect(assert.isBaseTypeExNull(nul)).toEqual(false);
        expect(assert.isBaseTypeExNull(undef)).toEqual(false);
        expect(assert.isBaseTypeExNull(func)).toEqual(false);
        expect(assert.isBaseTypeExNull(reg)).toEqual(false);
        expect(assert.isBaseTypeExNull(strictObj)).toEqual(false);
        expect(assert.isBaseTypeExNull(customClass)).toEqual(false);
        expect(assert.isBaseTypeExNull(arr)).toEqual(false);
        expect(assert.isBaseTypeExNull(arrEx)).toEqual(false);
        expect(assert.isBaseTypeExNull(span)).toEqual(false);
    });
});
