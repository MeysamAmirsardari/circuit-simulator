import * as assert from 'src/lib/assertion';

class ExtendArr extends Array {}
class Obj {}

const num = 1;
const str = '1';
const bool = true;
const sym = Symbol('key');
const nul = null;
const undef = undefined;
const func = () => void 0;
const reg = /123/;
const strictObj = {};
const customClass = new Obj();
const arr = [1, 2];
const arrEx = new ExtendArr();
const span = document.createElement('span');
const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');

describe('assertion.ts: assert the type of data', () => {
    test('number', () => {
        expect(assert.isNumber(num)).toBe(true);
        expect(assert.isNumber(str)).toBe(false);
        expect(assert.isNumber(bool)).toBe(false);
        expect(assert.isNumber(sym)).toBe(false);
        expect(assert.isNumber(nul)).toBe(false);
        expect(assert.isNumber(undef)).toBe(false);
        expect(assert.isNumber(func)).toBe(false);
        expect(assert.isNumber(reg)).toBe(false);
        expect(assert.isNumber(strictObj)).toBe(false);
        expect(assert.isNumber(customClass)).toBe(false);
        expect(assert.isNumber(arr)).toBe(false);
        expect(assert.isNumber(arrEx)).toBe(false);
        expect(assert.isNumber(span)).toBe(false);
    });
    test('string', () => {
        expect(assert.isString(num)).toBe(false);
        expect(assert.isString(str)).toBe(true);
        expect(assert.isString(bool)).toBe(false);
        expect(assert.isString(sym)).toBe(false);
        expect(assert.isString(nul)).toBe(false);
        expect(assert.isString(undef)).toBe(false);
        expect(assert.isString(func)).toBe(false);
        expect(assert.isString(reg)).toBe(false);
        expect(assert.isString(strictObj)).toBe(false);
        expect(assert.isString(customClass)).toBe(false);
        expect(assert.isString(arr)).toBe(false);
        expect(assert.isString(arrEx)).toBe(false);
        expect(assert.isString(span)).toBe(false);
    });
    test('boolean', () => {
        expect(assert.isBoolean(num)).toBe(false);
        expect(assert.isBoolean(str)).toBe(false);
        expect(assert.isBoolean(bool)).toBe(true);
        expect(assert.isBoolean(sym)).toBe(false);
        expect(assert.isBoolean(nul)).toBe(false);
        expect(assert.isBoolean(undef)).toBe(false);
        expect(assert.isBoolean(func)).toBe(false);
        expect(assert.isBoolean(reg)).toBe(false);
        expect(assert.isBoolean(strictObj)).toBe(false);
        expect(assert.isBoolean(customClass)).toBe(false);
        expect(assert.isBoolean(arr)).toBe(false);
        expect(assert.isBoolean(arrEx)).toBe(false);
        expect(assert.isBoolean(span)).toBe(false);
    });
    test('symbol', () => {
        expect(assert.isSymbol(num)).toBe(false);
        expect(assert.isSymbol(str)).toBe(false);
        expect(assert.isSymbol(bool)).toBe(false);
        expect(assert.isSymbol(sym)).toBe(true);
        expect(assert.isSymbol(nul)).toBe(false);
        expect(assert.isSymbol(undef)).toBe(false);
        expect(assert.isSymbol(func)).toBe(false);
        expect(assert.isSymbol(reg)).toBe(false);
        expect(assert.isSymbol(strictObj)).toBe(false);
        expect(assert.isSymbol(customClass)).toBe(false);
        expect(assert.isSymbol(arr)).toBe(false);
        expect(assert.isSymbol(arrEx)).toBe(false);
        expect(assert.isSymbol(span)).toBe(false);
    });
    test('null', () => {
        expect(assert.isNull(num)).toBe(false);
        expect(assert.isNull(str)).toBe(false);
        expect(assert.isNull(bool)).toBe(false);
        expect(assert.isNull(sym)).toBe(false);
        expect(assert.isNull(nul)).toBe(true);
        expect(assert.isNull(undef)).toBe(true);
        expect(assert.isNull(func)).toBe(false);
        expect(assert.isNull(reg)).toBe(false);
        expect(assert.isNull(strictObj)).toBe(false);
        expect(assert.isNull(customClass)).toBe(false);
        expect(assert.isNull(arr)).toBe(false);
        expect(assert.isNull(arrEx)).toBe(false);
        expect(assert.isNull(span)).toBe(false);
    });
    test('function', () => {
        expect(assert.isFunction(num)).toBe(false);
        expect(assert.isFunction(str)).toBe(false);
        expect(assert.isFunction(bool)).toBe(false);
        expect(assert.isFunction(sym)).toBe(false);
        expect(assert.isFunction(nul)).toBe(false);
        expect(assert.isFunction(undef)).toBe(false);
        expect(assert.isFunction(func)).toBe(true);
        expect(assert.isFunction(reg)).toBe(false);
        expect(assert.isFunction(strictObj)).toBe(false);
        expect(assert.isFunction(customClass)).toBe(false);
        expect(assert.isFunction(arr)).toBe(false);
        expect(assert.isFunction(arrEx)).toBe(false);
        expect(assert.isFunction(span)).toBe(false);
    });
    test('strict object', () => {
        expect(assert.isStrictObject(num)).toBe(false);
        expect(assert.isStrictObject(str)).toBe(false);
        expect(assert.isStrictObject(bool)).toBe(false);
        expect(assert.isStrictObject(sym)).toBe(false);
        expect(assert.isStrictObject(nul)).toBe(false);
        expect(assert.isStrictObject(undef)).toBe(false);
        expect(assert.isStrictObject(func)).toBe(false);
        expect(assert.isStrictObject(reg)).toBe(false);
        expect(assert.isStrictObject(strictObj)).toBe(true);
        expect(assert.isStrictObject(customClass)).toBe(true);
        expect(assert.isStrictObject(arr)).toBe(false);
        expect(assert.isStrictObject(arrEx)).toBe(false);
        expect(assert.isStrictObject(span)).toBe(false);
    });
    test('object', () => {
        expect(assert.isObject(num)).toBe(false);
        expect(assert.isObject(str)).toBe(false);
        expect(assert.isObject(bool)).toBe(false);
        expect(assert.isObject(sym)).toBe(false);
        expect(assert.isObject(nul)).toBe(false);
        expect(assert.isObject(undef)).toBe(false);
        expect(assert.isObject(func)).toBe(true);
        expect(assert.isObject(reg)).toBe(true);
        expect(assert.isObject(strictObj)).toBe(true);
        expect(assert.isObject(customClass)).toBe(true);
        expect(assert.isObject(arr)).toBe(true);
        expect(assert.isObject(arrEx)).toBe(true);
        expect(assert.isObject(span)).toBe(true);
    });
    test('array', () => {
        expect(assert.isArray(num)).toBe(false);
        expect(assert.isArray(str)).toBe(false);
        expect(assert.isArray(bool)).toBe(false);
        expect(assert.isArray(sym)).toBe(false);
        expect(assert.isArray(nul)).toBe(false);
        expect(assert.isArray(undef)).toBe(false);
        expect(assert.isArray(func)).toBe(false);
        expect(assert.isArray(reg)).toBe(false);
        expect(assert.isArray(strictObj)).toBe(false);
        expect(assert.isArray(customClass)).toBe(false);
        expect(assert.isArray(arr)).toBe(true);
        expect(assert.isArray(arrEx)).toBe(true);
        expect(assert.isArray(span)).toBe(false);
    });
    test('regExp', () => {
        expect(assert.isRegExp(num)).toBe(false);
        expect(assert.isRegExp(str)).toBe(false);
        expect(assert.isRegExp(bool)).toBe(false);
        expect(assert.isRegExp(sym)).toBe(false);
        expect(assert.isRegExp(nul)).toBe(false);
        expect(assert.isRegExp(undef)).toBe(false);
        expect(assert.isRegExp(func)).toBe(false);
        expect(assert.isRegExp(reg)).toBe(true);
        expect(assert.isRegExp(strictObj)).toBe(false);
        expect(assert.isRegExp(customClass)).toBe(false);
        expect(assert.isRegExp(arr)).toBe(false);
        expect(assert.isRegExp(arrEx)).toBe(false);
        expect(assert.isRegExp(span)).toBe(false);
    });
    test('element', () => {
        expect(assert.isElement(num)).toBe(false);
        expect(assert.isElement(str)).toBe(false);
        expect(assert.isElement(bool)).toBe(false);
        expect(assert.isElement(sym)).toBe(false);
        expect(assert.isElement(nul)).toBe(false);
        expect(assert.isElement(undef)).toBe(false);
        expect(assert.isElement(func)).toBe(false);
        expect(assert.isElement(reg)).toBe(false);
        expect(assert.isElement(strictObj)).toBe(false);
        expect(assert.isElement(customClass)).toBe(false);
        expect(assert.isElement(arr)).toBe(false);
        expect(assert.isElement(arrEx)).toBe(false);
        expect(assert.isElement(span)).toBe(true);
        expect(assert.isElement(circle)).toBe(true);
    });
    test('base type', () => {
        expect(assert.isBaseType(num)).toBe(true);
        expect(assert.isBaseType(str)).toBe(true);
        expect(assert.isBaseType(bool)).toBe(true);
        expect(assert.isBaseType(sym)).toBe(true);
        expect(assert.isBaseType(nul)).toBe(true);
        expect(assert.isBaseType(undef)).toBe(true);
        expect(assert.isBaseType(func)).toBe(false);
        expect(assert.isBaseType(reg)).toBe(false);
        expect(assert.isBaseType(strictObj)).toBe(false);
        expect(assert.isBaseType(customClass)).toBe(false);
        expect(assert.isBaseType(arr)).toBe(false);
        expect(assert.isBaseType(arrEx)).toBe(false);
        expect(assert.isBaseType(span)).toBe(false);
    });
    test('base type exclude null', () => {
        expect(assert.isBaseTypeExNull(num)).toBe(true);
        expect(assert.isBaseTypeExNull(str)).toBe(true);
        expect(assert.isBaseTypeExNull(bool)).toBe(true);
        expect(assert.isBaseTypeExNull(sym)).toBe(true);
        expect(assert.isBaseTypeExNull(nul)).toBe(false);
        expect(assert.isBaseTypeExNull(undef)).toBe(false);
        expect(assert.isBaseTypeExNull(func)).toBe(false);
        expect(assert.isBaseTypeExNull(reg)).toBe(false);
        expect(assert.isBaseTypeExNull(strictObj)).toBe(false);
        expect(assert.isBaseTypeExNull(customClass)).toBe(false);
        expect(assert.isBaseTypeExNull(arr)).toBe(false);
        expect(assert.isBaseTypeExNull(arrEx)).toBe(false);
        expect(assert.isBaseTypeExNull(span)).toBe(false);
    });
});
